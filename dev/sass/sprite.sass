// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$house-name: 'house'
$house-x: 0px
$house-y: 0px
$house-offset-x: 0px
$house-offset-y: 0px
$house-width: 642px
$house-height: 550px
$house-total-width: 1289px
$house-total-height: 1067px
$house-image: '../img/general/sprite.png'
$house: (0px, 0px, 0px, 0px, 642px, 550px, 1289px, 1067px, '../img/general/sprite.png', 'house', )
$house-action-name: 'house_action'
$house-action-x: 647px
$house-action-y: 0px
$house-action-offset-x: -647px
$house-action-offset-y: 0px
$house-action-width: 642px
$house-action-height: 550px
$house-action-total-width: 1289px
$house-action-total-height: 1067px
$house-action-image: '../img/general/sprite.png'
$house-action: (647px, 0px, -647px, 0px, 642px, 550px, 1289px, 1067px, '../img/general/sprite.png', 'house_action', )
$surp-name: 'surp'
$surp-x: 0px
$surp-y: 555px
$surp-offset-x: 0px
$surp-offset-y: -555px
$surp-width: 455px
$surp-height: 512px
$surp-total-width: 1289px
$surp-total-height: 1067px
$surp-image: '../img/general/sprite.png'
$surp: (0px, 555px, 0px, -555px, 455px, 512px, 1289px, 1067px, '../img/general/sprite.png', 'surp', )
$surp-action-name: 'surp_action'
$surp-action-x: 460px
$surp-action-y: 555px
$surp-action-offset-x: -460px
$surp-action-offset-y: -555px
$surp-action-width: 455px
$surp-action-height: 512px
$surp-action-total-width: 1289px
$surp-action-total-height: 1067px
$surp-action-image: '../img/general/sprite.png'
$surp-action: (460px, 555px, -460px, -555px, 455px, 512px, 1289px, 1067px, '../img/general/sprite.png', 'surp_action', )
$spritesheet-width: 1289px
$spritesheet-height: 1067px
$spritesheet-image: '../img/general/sprite.png'
$spritesheet-sprites: ($house, $house-action, $surp, $surp-action, )
$spritesheet: (1289px, 1067px, '../img/general/sprite.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
